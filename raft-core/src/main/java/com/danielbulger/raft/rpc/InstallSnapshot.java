/**
 * Autogenerated by Thrift Compiler (0.10.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
package com.danielbulger.raft.rpc;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked", "unused"})
@javax.annotation.Generated(value = "Autogenerated by Thrift Compiler (0.10.0)", date = "2020-07-23")
public class InstallSnapshot implements org.apache.thrift.TBase<InstallSnapshot, InstallSnapshot._Fields>, java.io.Serializable, Cloneable, Comparable<InstallSnapshot> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("InstallSnapshot");

  private static final org.apache.thrift.protocol.TField TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("term", org.apache.thrift.protocol.TType.I64, (short)1);
  private static final org.apache.thrift.protocol.TField LEADER_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("leaderId", org.apache.thrift.protocol.TType.I32, (short)2);
  private static final org.apache.thrift.protocol.TField LAST_INCLUDED_INDEX_FIELD_DESC = new org.apache.thrift.protocol.TField("lastIncludedIndex", org.apache.thrift.protocol.TType.I64, (short)3);
  private static final org.apache.thrift.protocol.TField LAST_INCLUDED_TERM_FIELD_DESC = new org.apache.thrift.protocol.TField("lastIncludedTerm", org.apache.thrift.protocol.TType.I64, (short)4);
  private static final org.apache.thrift.protocol.TField OFFSET_FIELD_DESC = new org.apache.thrift.protocol.TField("offset", org.apache.thrift.protocol.TType.I64, (short)5);
  private static final org.apache.thrift.protocol.TField DATA_FIELD_DESC = new org.apache.thrift.protocol.TField("data", org.apache.thrift.protocol.TType.STRING, (short)6);
  private static final org.apache.thrift.protocol.TField COMPLETED_FIELD_DESC = new org.apache.thrift.protocol.TField("completed", org.apache.thrift.protocol.TType.BOOL, (short)7);

  private static final org.apache.thrift.scheme.SchemeFactory STANDARD_SCHEME_FACTORY = new InstallSnapshotStandardSchemeFactory();
  private static final org.apache.thrift.scheme.SchemeFactory TUPLE_SCHEME_FACTORY = new InstallSnapshotTupleSchemeFactory();

  public long term; // required
  public int leaderId; // required
  public long lastIncludedIndex; // required
  public long lastIncludedTerm; // required
  public long offset; // required
  public java.nio.ByteBuffer data; // required
  public boolean completed; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    TERM((short)1, "term"),
    LEADER_ID((short)2, "leaderId"),
    LAST_INCLUDED_INDEX((short)3, "lastIncludedIndex"),
    LAST_INCLUDED_TERM((short)4, "lastIncludedTerm"),
    OFFSET((short)5, "offset"),
    DATA((short)6, "data"),
    COMPLETED((short)7, "completed");

    private static final java.util.Map<java.lang.String, _Fields> byName = new java.util.HashMap<java.lang.String, _Fields>();

    static {
      for (_Fields field : java.util.EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // TERM
          return TERM;
        case 2: // LEADER_ID
          return LEADER_ID;
        case 3: // LAST_INCLUDED_INDEX
          return LAST_INCLUDED_INDEX;
        case 4: // LAST_INCLUDED_TERM
          return LAST_INCLUDED_TERM;
        case 5: // OFFSET
          return OFFSET;
        case 6: // DATA
          return DATA;
        case 7: // COMPLETED
          return COMPLETED;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new java.lang.IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(java.lang.String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final java.lang.String _fieldName;

    _Fields(short thriftId, java.lang.String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public java.lang.String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __TERM_ISSET_ID = 0;
  private static final int __LEADERID_ISSET_ID = 1;
  private static final int __LASTINCLUDEDINDEX_ISSET_ID = 2;
  private static final int __LASTINCLUDEDTERM_ISSET_ID = 3;
  private static final int __OFFSET_ISSET_ID = 4;
  private static final int __COMPLETED_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    java.util.Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new java.util.EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.TERM, new org.apache.thrift.meta_data.FieldMetaData("term", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Term")));
    tmpMap.put(_Fields.LEADER_ID, new org.apache.thrift.meta_data.FieldMetaData("leaderId", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.LAST_INCLUDED_INDEX, new org.apache.thrift.meta_data.FieldMetaData("lastIncludedIndex", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "LogIndex")));
    tmpMap.put(_Fields.LAST_INCLUDED_TERM, new org.apache.thrift.meta_data.FieldMetaData("lastIncludedTerm", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64        , "Term")));
    tmpMap.put(_Fields.OFFSET, new org.apache.thrift.meta_data.FieldMetaData("offset", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.DATA, new org.apache.thrift.meta_data.FieldMetaData("data", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING        , true)));
    tmpMap.put(_Fields.COMPLETED, new org.apache.thrift.meta_data.FieldMetaData("completed", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    metaDataMap = java.util.Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(InstallSnapshot.class, metaDataMap);
  }

  public InstallSnapshot() {
  }

  public InstallSnapshot(
    long term,
    int leaderId,
    long lastIncludedIndex,
    long lastIncludedTerm,
    long offset,
    java.nio.ByteBuffer data,
    boolean completed)
  {
    this();
    this.term = term;
    setTermIsSet(true);
    this.leaderId = leaderId;
    setLeaderIdIsSet(true);
    this.lastIncludedIndex = lastIncludedIndex;
    setLastIncludedIndexIsSet(true);
    this.lastIncludedTerm = lastIncludedTerm;
    setLastIncludedTermIsSet(true);
    this.offset = offset;
    setOffsetIsSet(true);
    this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    this.completed = completed;
    setCompletedIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public InstallSnapshot(InstallSnapshot other) {
    __isset_bitfield = other.__isset_bitfield;
    this.term = other.term;
    this.leaderId = other.leaderId;
    this.lastIncludedIndex = other.lastIncludedIndex;
    this.lastIncludedTerm = other.lastIncludedTerm;
    this.offset = other.offset;
    if (other.isSetData()) {
      this.data = org.apache.thrift.TBaseHelper.copyBinary(other.data);
    }
    this.completed = other.completed;
  }

  public InstallSnapshot deepCopy() {
    return new InstallSnapshot(this);
  }

  @Override
  public void clear() {
    setTermIsSet(false);
    this.term = 0;
    setLeaderIdIsSet(false);
    this.leaderId = 0;
    setLastIncludedIndexIsSet(false);
    this.lastIncludedIndex = 0;
    setLastIncludedTermIsSet(false);
    this.lastIncludedTerm = 0;
    setOffsetIsSet(false);
    this.offset = 0;
    this.data = null;
    setCompletedIsSet(false);
    this.completed = false;
  }

  public long getTerm() {
    return this.term;
  }

  public InstallSnapshot setTerm(long term) {
    this.term = term;
    setTermIsSet(true);
    return this;
  }

  public void unsetTerm() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __TERM_ISSET_ID);
  }

  /** Returns true if field term is set (has been assigned a value) and false otherwise */
  public boolean isSetTerm() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __TERM_ISSET_ID);
  }

  public void setTermIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __TERM_ISSET_ID, value);
  }

  public int getLeaderId() {
    return this.leaderId;
  }

  public InstallSnapshot setLeaderId(int leaderId) {
    this.leaderId = leaderId;
    setLeaderIdIsSet(true);
    return this;
  }

  public void unsetLeaderId() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LEADERID_ISSET_ID);
  }

  /** Returns true if field leaderId is set (has been assigned a value) and false otherwise */
  public boolean isSetLeaderId() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LEADERID_ISSET_ID);
  }

  public void setLeaderIdIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LEADERID_ISSET_ID, value);
  }

  public long getLastIncludedIndex() {
    return this.lastIncludedIndex;
  }

  public InstallSnapshot setLastIncludedIndex(long lastIncludedIndex) {
    this.lastIncludedIndex = lastIncludedIndex;
    setLastIncludedIndexIsSet(true);
    return this;
  }

  public void unsetLastIncludedIndex() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTINCLUDEDINDEX_ISSET_ID);
  }

  /** Returns true if field lastIncludedIndex is set (has been assigned a value) and false otherwise */
  public boolean isSetLastIncludedIndex() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTINCLUDEDINDEX_ISSET_ID);
  }

  public void setLastIncludedIndexIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTINCLUDEDINDEX_ISSET_ID, value);
  }

  public long getLastIncludedTerm() {
    return this.lastIncludedTerm;
  }

  public InstallSnapshot setLastIncludedTerm(long lastIncludedTerm) {
    this.lastIncludedTerm = lastIncludedTerm;
    setLastIncludedTermIsSet(true);
    return this;
  }

  public void unsetLastIncludedTerm() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __LASTINCLUDEDTERM_ISSET_ID);
  }

  /** Returns true if field lastIncludedTerm is set (has been assigned a value) and false otherwise */
  public boolean isSetLastIncludedTerm() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __LASTINCLUDEDTERM_ISSET_ID);
  }

  public void setLastIncludedTermIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __LASTINCLUDEDTERM_ISSET_ID, value);
  }

  public long getOffset() {
    return this.offset;
  }

  public InstallSnapshot setOffset(long offset) {
    this.offset = offset;
    setOffsetIsSet(true);
    return this;
  }

  public void unsetOffset() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  /** Returns true if field offset is set (has been assigned a value) and false otherwise */
  public boolean isSetOffset() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __OFFSET_ISSET_ID);
  }

  public void setOffsetIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __OFFSET_ISSET_ID, value);
  }

  public byte[] getData() {
    setData(org.apache.thrift.TBaseHelper.rightSize(data));
    return data == null ? null : data.array();
  }

  public java.nio.ByteBuffer bufferForData() {
    return org.apache.thrift.TBaseHelper.copyBinary(data);
  }

  public InstallSnapshot setData(byte[] data) {
    this.data = data == null ? (java.nio.ByteBuffer)null : java.nio.ByteBuffer.wrap(data.clone());
    return this;
  }

  public InstallSnapshot setData(java.nio.ByteBuffer data) {
    this.data = org.apache.thrift.TBaseHelper.copyBinary(data);
    return this;
  }

  public void unsetData() {
    this.data = null;
  }

  /** Returns true if field data is set (has been assigned a value) and false otherwise */
  public boolean isSetData() {
    return this.data != null;
  }

  public void setDataIsSet(boolean value) {
    if (!value) {
      this.data = null;
    }
  }

  public boolean isCompleted() {
    return this.completed;
  }

  public InstallSnapshot setCompleted(boolean completed) {
    this.completed = completed;
    setCompletedIsSet(true);
    return this;
  }

  public void unsetCompleted() {
    __isset_bitfield = org.apache.thrift.EncodingUtils.clearBit(__isset_bitfield, __COMPLETED_ISSET_ID);
  }

  /** Returns true if field completed is set (has been assigned a value) and false otherwise */
  public boolean isSetCompleted() {
    return org.apache.thrift.EncodingUtils.testBit(__isset_bitfield, __COMPLETED_ISSET_ID);
  }

  public void setCompletedIsSet(boolean value) {
    __isset_bitfield = org.apache.thrift.EncodingUtils.setBit(__isset_bitfield, __COMPLETED_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, java.lang.Object value) {
    switch (field) {
    case TERM:
      if (value == null) {
        unsetTerm();
      } else {
        setTerm((java.lang.Long)value);
      }
      break;

    case LEADER_ID:
      if (value == null) {
        unsetLeaderId();
      } else {
        setLeaderId((java.lang.Integer)value);
      }
      break;

    case LAST_INCLUDED_INDEX:
      if (value == null) {
        unsetLastIncludedIndex();
      } else {
        setLastIncludedIndex((java.lang.Long)value);
      }
      break;

    case LAST_INCLUDED_TERM:
      if (value == null) {
        unsetLastIncludedTerm();
      } else {
        setLastIncludedTerm((java.lang.Long)value);
      }
      break;

    case OFFSET:
      if (value == null) {
        unsetOffset();
      } else {
        setOffset((java.lang.Long)value);
      }
      break;

    case DATA:
      if (value == null) {
        unsetData();
      } else {
        if (value instanceof byte[]) {
          setData((byte[])value);
        } else {
          setData((java.nio.ByteBuffer)value);
        }
      }
      break;

    case COMPLETED:
      if (value == null) {
        unsetCompleted();
      } else {
        setCompleted((java.lang.Boolean)value);
      }
      break;

    }
  }

  public java.lang.Object getFieldValue(_Fields field) {
    switch (field) {
    case TERM:
      return getTerm();

    case LEADER_ID:
      return getLeaderId();

    case LAST_INCLUDED_INDEX:
      return getLastIncludedIndex();

    case LAST_INCLUDED_TERM:
      return getLastIncludedTerm();

    case OFFSET:
      return getOffset();

    case DATA:
      return getData();

    case COMPLETED:
      return isCompleted();

    }
    throw new java.lang.IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new java.lang.IllegalArgumentException();
    }

    switch (field) {
    case TERM:
      return isSetTerm();
    case LEADER_ID:
      return isSetLeaderId();
    case LAST_INCLUDED_INDEX:
      return isSetLastIncludedIndex();
    case LAST_INCLUDED_TERM:
      return isSetLastIncludedTerm();
    case OFFSET:
      return isSetOffset();
    case DATA:
      return isSetData();
    case COMPLETED:
      return isSetCompleted();
    }
    throw new java.lang.IllegalStateException();
  }

  @Override
  public boolean equals(java.lang.Object that) {
    if (that == null)
      return false;
    if (that instanceof InstallSnapshot)
      return this.equals((InstallSnapshot)that);
    return false;
  }

  public boolean equals(InstallSnapshot that) {
    if (that == null)
      return false;
    if (this == that)
      return true;

    boolean this_present_term = true;
    boolean that_present_term = true;
    if (this_present_term || that_present_term) {
      if (!(this_present_term && that_present_term))
        return false;
      if (this.term != that.term)
        return false;
    }

    boolean this_present_leaderId = true;
    boolean that_present_leaderId = true;
    if (this_present_leaderId || that_present_leaderId) {
      if (!(this_present_leaderId && that_present_leaderId))
        return false;
      if (this.leaderId != that.leaderId)
        return false;
    }

    boolean this_present_lastIncludedIndex = true;
    boolean that_present_lastIncludedIndex = true;
    if (this_present_lastIncludedIndex || that_present_lastIncludedIndex) {
      if (!(this_present_lastIncludedIndex && that_present_lastIncludedIndex))
        return false;
      if (this.lastIncludedIndex != that.lastIncludedIndex)
        return false;
    }

    boolean this_present_lastIncludedTerm = true;
    boolean that_present_lastIncludedTerm = true;
    if (this_present_lastIncludedTerm || that_present_lastIncludedTerm) {
      if (!(this_present_lastIncludedTerm && that_present_lastIncludedTerm))
        return false;
      if (this.lastIncludedTerm != that.lastIncludedTerm)
        return false;
    }

    boolean this_present_offset = true;
    boolean that_present_offset = true;
    if (this_present_offset || that_present_offset) {
      if (!(this_present_offset && that_present_offset))
        return false;
      if (this.offset != that.offset)
        return false;
    }

    boolean this_present_data = true && this.isSetData();
    boolean that_present_data = true && that.isSetData();
    if (this_present_data || that_present_data) {
      if (!(this_present_data && that_present_data))
        return false;
      if (!this.data.equals(that.data))
        return false;
    }

    boolean this_present_completed = true;
    boolean that_present_completed = true;
    if (this_present_completed || that_present_completed) {
      if (!(this_present_completed && that_present_completed))
        return false;
      if (this.completed != that.completed)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    int hashCode = 1;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(term);

    hashCode = hashCode * 8191 + leaderId;

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastIncludedIndex);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(lastIncludedTerm);

    hashCode = hashCode * 8191 + org.apache.thrift.TBaseHelper.hashCode(offset);

    hashCode = hashCode * 8191 + ((isSetData()) ? 131071 : 524287);
    if (isSetData())
      hashCode = hashCode * 8191 + data.hashCode();

    hashCode = hashCode * 8191 + ((completed) ? 131071 : 524287);

    return hashCode;
  }

  @Override
  public int compareTo(InstallSnapshot other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = java.lang.Boolean.valueOf(isSetTerm()).compareTo(other.isSetTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.term, other.term);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLeaderId()).compareTo(other.isSetLeaderId());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLeaderId()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.leaderId, other.leaderId);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastIncludedIndex()).compareTo(other.isSetLastIncludedIndex());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastIncludedIndex()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastIncludedIndex, other.lastIncludedIndex);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetLastIncludedTerm()).compareTo(other.isSetLastIncludedTerm());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetLastIncludedTerm()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.lastIncludedTerm, other.lastIncludedTerm);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetOffset()).compareTo(other.isSetOffset());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOffset()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.offset, other.offset);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetData()).compareTo(other.isSetData());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetData()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.data, other.data);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = java.lang.Boolean.valueOf(isSetCompleted()).compareTo(other.isSetCompleted());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetCompleted()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.completed, other.completed);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    scheme(iprot).read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    scheme(oprot).write(oprot, this);
  }

  @Override
  public java.lang.String toString() {
    java.lang.StringBuilder sb = new java.lang.StringBuilder("InstallSnapshot(");
    boolean first = true;

    sb.append("term:");
    sb.append(this.term);
    first = false;
    if (!first) sb.append(", ");
    sb.append("leaderId:");
    sb.append(this.leaderId);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastIncludedIndex:");
    sb.append(this.lastIncludedIndex);
    first = false;
    if (!first) sb.append(", ");
    sb.append("lastIncludedTerm:");
    sb.append(this.lastIncludedTerm);
    first = false;
    if (!first) sb.append(", ");
    sb.append("offset:");
    sb.append(this.offset);
    first = false;
    if (!first) sb.append(", ");
    sb.append("data:");
    if (this.data == null) {
      sb.append("null");
    } else {
      org.apache.thrift.TBaseHelper.toString(this.data, sb);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("completed:");
    sb.append(this.completed);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, java.lang.ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class InstallSnapshotStandardSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InstallSnapshotStandardScheme getScheme() {
      return new InstallSnapshotStandardScheme();
    }
  }

  private static class InstallSnapshotStandardScheme extends org.apache.thrift.scheme.StandardScheme<InstallSnapshot> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, InstallSnapshot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.term = iprot.readI64();
              struct.setTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // LEADER_ID
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.leaderId = iprot.readI32();
              struct.setLeaderIdIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // LAST_INCLUDED_INDEX
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastIncludedIndex = iprot.readI64();
              struct.setLastIncludedIndexIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // LAST_INCLUDED_TERM
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.lastIncludedTerm = iprot.readI64();
              struct.setLastIncludedTermIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // OFFSET
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.offset = iprot.readI64();
              struct.setOffsetIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // DATA
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.data = iprot.readBinary();
              struct.setDataIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // COMPLETED
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.completed = iprot.readBool();
              struct.setCompletedIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, InstallSnapshot struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      oprot.writeFieldBegin(TERM_FIELD_DESC);
      oprot.writeI64(struct.term);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LEADER_ID_FIELD_DESC);
      oprot.writeI32(struct.leaderId);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_INCLUDED_INDEX_FIELD_DESC);
      oprot.writeI64(struct.lastIncludedIndex);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(LAST_INCLUDED_TERM_FIELD_DESC);
      oprot.writeI64(struct.lastIncludedTerm);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(OFFSET_FIELD_DESC);
      oprot.writeI64(struct.offset);
      oprot.writeFieldEnd();
      if (struct.data != null) {
        oprot.writeFieldBegin(DATA_FIELD_DESC);
        oprot.writeBinary(struct.data);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(COMPLETED_FIELD_DESC);
      oprot.writeBool(struct.completed);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class InstallSnapshotTupleSchemeFactory implements org.apache.thrift.scheme.SchemeFactory {
    public InstallSnapshotTupleScheme getScheme() {
      return new InstallSnapshotTupleScheme();
    }
  }

  private static class InstallSnapshotTupleScheme extends org.apache.thrift.scheme.TupleScheme<InstallSnapshot> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, InstallSnapshot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol oprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet optionals = new java.util.BitSet();
      if (struct.isSetTerm()) {
        optionals.set(0);
      }
      if (struct.isSetLeaderId()) {
        optionals.set(1);
      }
      if (struct.isSetLastIncludedIndex()) {
        optionals.set(2);
      }
      if (struct.isSetLastIncludedTerm()) {
        optionals.set(3);
      }
      if (struct.isSetOffset()) {
        optionals.set(4);
      }
      if (struct.isSetData()) {
        optionals.set(5);
      }
      if (struct.isSetCompleted()) {
        optionals.set(6);
      }
      oprot.writeBitSet(optionals, 7);
      if (struct.isSetTerm()) {
        oprot.writeI64(struct.term);
      }
      if (struct.isSetLeaderId()) {
        oprot.writeI32(struct.leaderId);
      }
      if (struct.isSetLastIncludedIndex()) {
        oprot.writeI64(struct.lastIncludedIndex);
      }
      if (struct.isSetLastIncludedTerm()) {
        oprot.writeI64(struct.lastIncludedTerm);
      }
      if (struct.isSetOffset()) {
        oprot.writeI64(struct.offset);
      }
      if (struct.isSetData()) {
        oprot.writeBinary(struct.data);
      }
      if (struct.isSetCompleted()) {
        oprot.writeBool(struct.completed);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, InstallSnapshot struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TTupleProtocol iprot = (org.apache.thrift.protocol.TTupleProtocol) prot;
      java.util.BitSet incoming = iprot.readBitSet(7);
      if (incoming.get(0)) {
        struct.term = iprot.readI64();
        struct.setTermIsSet(true);
      }
      if (incoming.get(1)) {
        struct.leaderId = iprot.readI32();
        struct.setLeaderIdIsSet(true);
      }
      if (incoming.get(2)) {
        struct.lastIncludedIndex = iprot.readI64();
        struct.setLastIncludedIndexIsSet(true);
      }
      if (incoming.get(3)) {
        struct.lastIncludedTerm = iprot.readI64();
        struct.setLastIncludedTermIsSet(true);
      }
      if (incoming.get(4)) {
        struct.offset = iprot.readI64();
        struct.setOffsetIsSet(true);
      }
      if (incoming.get(5)) {
        struct.data = iprot.readBinary();
        struct.setDataIsSet(true);
      }
      if (incoming.get(6)) {
        struct.completed = iprot.readBool();
        struct.setCompletedIsSet(true);
      }
    }
  }

  private static <S extends org.apache.thrift.scheme.IScheme> S scheme(org.apache.thrift.protocol.TProtocol proto) {
    return (org.apache.thrift.scheme.StandardScheme.class.equals(proto.getScheme()) ? STANDARD_SCHEME_FACTORY : TUPLE_SCHEME_FACTORY).getScheme();
  }
}

